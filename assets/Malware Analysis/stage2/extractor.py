import os
from pathlib import Path

# You must place the .dat file in the same directory or provide full path
DAT_FILE = "c2cae627-fef8-45f9-8318-c2e6fd8c791f.dat"

# Output directory
OUTPUT_DIR = "extracted_payloads"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Platform mappings: (start_offset, end_offset, output_filename)
variants = {
    "windows_arm64": (493_568, 1_030_144, "lib_win_arm64.dll"),
    "windows_x64":   (0, 493_568, "lib_win_x64.dll"),
    # Add more entries if Java lists other arch offsets in static block
}

def extract_variant(file_path, offset_start, offset_end, out_path):
    with open(file_path, "rb") as f:
        f.seek(offset_start)
        data = f.read(offset_end - offset_start)
        with open(out_path, "wb") as out_file:
            out_file.write(data)
        print(f"[+] Extracted {out_path} ({len(data):,} bytes)")

def main():
    if not os.path.exists(DAT_FILE):
        print(f"[!] File not found: {DAT_FILE}")
        return

    for name, (start, end, filename) in variants.items():
        out_path = os.path.join(OUTPUT_DIR, filename)
        extract_variant(DAT_FILE, start, end, out_path)

if __name__ == "__main__":
    main()

