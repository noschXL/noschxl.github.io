int pre_c_init()
{
    /* tailcall */
    return _initialize_onexit_table(&atexit_table);
}

long unsigned int _CRT_INIT(void* hDllHandle, long unsigned int dwReason, void* lpreserved)
{
    if (!dwReason)
    {
        int __proc_attached_1 = __proc_attached;
        
        if (__proc_attached_1 <= 0)
            return dwReason;
        
        __proc_attached = __proc_attached_1 - 1;
        int64_t _.bss_1;
        
        while (true)
        {
            _.bss_1 = 0;
            
            if (0 == _.bss)
                _.bss = 1;
            else
                _.bss_1 = _.bss;
            
            if (!_.bss_1)
                break;
            
            Sleep(0x3e8);
        }
        
        if (__native_startup_state == 2)
        {
            _execute_onexit_table(&atexit_table);
            __native_startup_state = 0;
            _.bss;
            _.bss = _.bss_1;
        }
        else
            _amsg_exit(0x1f);
    }
    else if (dwReason == 1)
    {
        TEB* gsbase;
        void* StackBase = gsbase->NtTib.Self->NtTib.StackBase;
        int32_t rbp_1;
        
        while (true)
        {
            int64_t _.bss_2 = 0;
            
            if (0 == _.bss)
                _.bss = StackBase;
            else
                _.bss_2 = _.bss;
            
            if (!_.bss_2)
            {
                rbp_1 = 0;
                break;
            }
            
            if (StackBase == _.bss_2)
            {
                rbp_1 = 1;
                break;
            }
            
            Sleep(0x3e8);
        }
        
        if (__native_startup_state == 1)
            _amsg_exit(0x1f);
        else if (!__native_startup_state)
        {
            __native_startup_state = 1;
            _initterm(&__xi_a, &__xi_z);
        }
        
        if (__native_startup_state == 1)
        {
            _initterm(&__xc_a, &__xc_z);
            __native_startup_state = 2;
        }
        
        if (!rbp_1)
        {
            _.bss;
            _.bss = 0;
        }
        
        __dyn_tls_init(hDllHandle, 2, lpreserved);
        __proc_attached += 1;
    }
    
    return 1;
}

int __DllMainCRTStartup(void* hDllHandle, long unsigned int dwReason, void* lpreserved)
{
    __native_dllmain_reason = dwReason;
    int32_t result;
    
    if (dwReason)
    {
        _pei386_runtime_relocator();
        
        if (dwReason - 1 > 1)
        {
            result = 1;
            
            if (dwReason == 3)
                goto label_24d281221;
        }
        else if (!_CRT_INIT(hDllHandle, dwReason, lpreserved))
            result = 0;
        else if (dwReason == 1)
        {
            __main();
            result = 1;
        }
        else
            result = 1;
    }
    else if (!__proc_attached)
        result = 0;
    else
    {
        _pei386_runtime_relocator();
        label_24d281221:
        result = 1;
        
        if (!_CRT_INIT(hDllHandle, dwReason, lpreserved))
            result = 0;
    }
    
    __native_dllmain_reason = 0xffffffff;
    return result;
}

int DllMainCRTStartup(void* hDllHandle, long unsigned int dwReason, void* lpreserved)
{
    __mingw_app_type = 0;
    /* tailcall */
    return __DllMainCRTStartup(hDllHandle, dwReason, lpreserved);
}

int atexit(void (* func)())
{
    /* tailcall */
    return _register_onexit_function(&atexit_table, func);
}

int64_t __gcc_register_frame()
{
    /* tailcall */
    return atexit(__gcc_deregister_frame);
}

void __gcc_deregister_frame() __pure
{
    return;
}

int64_t Java_dev_majanito_Secret_loadSecret(int64_t* arg1)
{
    int64_t rdx;
    int64_t arg_10 = rdx;
    int64_t var_28 = 0x26;
    _.text(0x30);
    char var_68[0x10];
    char (* var_30)[0x10] = &var_68;
    
    for (void* i = nullptr; i < 0x26; i += 1)
        *(i + var_30) = *(i + &_.rdata) ^ 0xbb;
    
    (*var_30)[0x26] = 0;
    int64_t result = (*(*arg1 + 0x538))(arg1, var_30);
    memset(var_30, 0, 0x27);
    return result;
}

void __do_global_dtors()
{
    void (* i)() = **&p;
    
    while (i)
    {
        i();
        void (** p_1)() = p;
        i = p_1[1];
        p = &p_1[1];
    }
}

int64_t __do_global_ctors()
{
    int32_t rax_4 = 0;
    int32_t rcx;
    uint64_t r8_2;
    
    do
    {
        r8_2 = rax_4 + 1;
        rcx = rax_4;
        rax_4 = r8_2;
    } while (*(&__CTOR_LIST__ + (r8_2 << 3)));
    
    if (rcx)
    {
        uint64_t rax_1 = rcx;
        void* i = &__CTOR_LIST__ + (rax_1 << 3);
        
        do
        {
            (*i)();
            i -= 8;
        } while (i != ((rax_1 - (rcx - 1)) << 3) + 0x24d282488);
    }
    
    /* tailcall */
    return atexit(__do_global_dtors);
}

int __main(...)
{
    int initialized_1 = initialized;
    
    if (initialized_1)
        return initialized_1;
    
    initialized = 1;
    /* tailcall */
    return __do_global_ctors();
}

int __dyn_tls_dtor(void* hDllHandle, long unsigned int dwReason, void* lpreserved)
{
    if (dwReason != 3 && dwReason)
        return 1;
    
    __mingw_TLScallback(hDllHandle, dwReason, lpreserved);
    return 1;
}

int __dyn_tls_init(void* hDllHandle, long unsigned int dwReason, void* lpreserved)
{
    if (_CRT_MT != 2)
        _CRT_MT = 2;
    
    if (dwReason != 2 && dwReason == 1)
        __mingw_TLScallback(hDllHandle, dwReason, lpreserved);
    
    return 1;
}

int __tlregdtor(void (* func)()) __pure
{
    return 0;
}

void __report_error(char const* msg, ...) __noreturn
{
    int64_t _ArgList_1;
    int64_t _ArgList = _ArgList_1;
    int64_t r8;
    int64_t arg_18 = r8;
    int64_t r9;
    int64_t arg_20 = r9;
    fwrite("Mingw-w64 runtime failure:\n", 1, 0x1b, __acrt_iob_func(2));
    vfprintf(__acrt_iob_func(2), msg, &_ArgList);
    abort();
    /* no return */
}

unsigned char** mark_section_writable(void* addr)
{
    struct _MEMORY_BASIC_INFORMATION b;
    int64_t rdi;
    b.Type = rdi;
    int64_t rsi;
    b.State = rsi;
    b.Protect = *rsi[4];
    int64_t rbx;
    b.RegionSize = rbx;
    int64_t maxSections_1 = maxSections;
    unsigned char** result;
    
    if (maxSections_1 <= 0)
        maxSections_1 = 0;
    else
    {
        int32_t i = 0;
        result = &the_secs->sec_start;
        
        do
        {
            unsigned char* sec_start = ADJ(result)->sec_start;
            
            if (addr >= sec_start && addr < &sec_start[*(ADJ(result)->hash->Misc + 0)])
                goto label_24d28174a;
            
            i += 1;
            result = &result[5];
        } while (i != maxSections_1);
    }
    
    struct Section_Header* rax_2 = __mingw_GetSectionForAddress(addr);
    
    if (!rax_2)
    {
        __report_error("Address %p has no image-section", addr);
        /* no return */
    }
    
    void* rax_4 = &the_secs[maxSections_1];
    *(rax_4 + 0x20) = rax_2;
    *rax_4 = 0;
    void* lpAddress = &_GetPEImageBase()->e_magic[rax_2->virtualAddress];
    the_secs[maxSections_1].sec_start = lpAddress;
    int64_t buffer;
    
    if (!VirtualQuery(lpAddress, &buffer, 0x30))
    {
        __report_error("  VirtualQuery failed for %d byt…", rax_2->virtualSize, 
            the_secs[maxSections_1].sec_start);
        /* no return */
    }
    
    result = *b.AllocationBase[4];
    
    if ((result - 4) & 0xfffffffb && &result[-8] & 0xffffffbf)
    {
        int64_t lpAddress_1 = buffer;
        uint64_t BaseAddress = b.BaseAddress;
        enum PAGE_PROTECTION_FLAGS flNewProtect = PAGE_EXECUTE_READWRITE;
        
        if (result == 2)
            flNewProtect = PAGE_READWRITE;
        
        void* lpflOldProtect = &the_secs[maxSections_1];
        *(lpflOldProtect + 8) = lpAddress_1;
        *(lpflOldProtect + 0x10) = BaseAddress;
        result = VirtualProtect(lpAddress_1, BaseAddress, flNewProtect, lpflOldProtect);
        
        if (!result)
        {
            __report_error("  VirtualProtect failed with cod…", GetLastError());
            /* no return */
        }
    }
    
    maxSections += 1;
    label_24d28174a:
    int64_t rsi_1;
    rsi_1 = b.State;
    *rsi_1[4] = b.Protect;
    return result;
}

void _pei386_runtime_relocator()
{
    if (!was_init)
    {
        was_init = 1;
        void* rax_5 = (__mingw_GetSectionCount() * 0x28 + 0xf) & 0xfffffffffffffff0;
        _.text(rax_5);
        maxSections = 0;
        void var_88;
        the_secs = &var_88 - rax_5 + 0x30;
    }
}

void __mingwthr_run_key_dtors()
{
    EnterCriticalSection(&__mingwthr_cs);
    
    for (struct __mingwthr_key* i = key_dtor_list; i; i = i->next)
    {
        if (TlsGetValue(i->key) && !GetLastError())
            i->dtor();
    }
    
    /* tailcall */
    return LeaveCriticalSection(&__mingwthr_cs);
}

int ___w64_mingwthr_add_key_dtor(long unsigned int key, void (* dtor)())
{
    if (__mingwthr_cs_init)
    {
        long unsigned int* rax_2 = calloc(1, 0x18);
        
        if (!rax_2)
            return -1;
        
        *(rax_2 + 8) = dtor;
        *rax_2 = key;
        EnterCriticalSection(&__mingwthr_cs);
        struct __mingwthr_key* key_dtor_list_1 = key_dtor_list;
        key_dtor_list = rax_2;
        *(rax_2 + 0x10) = key_dtor_list_1;
        LeaveCriticalSection(&__mingwthr_cs);
    }
    
    return 0;
}

int ___w64_mingwthr_remove_key_dtor(long unsigned int key)
{
    if (!__mingwthr_cs_init)
        return 0;
    
    EnterCriticalSection(&__mingwthr_cs);
    struct __mingwthr_key* key_dtor_list_1 = key_dtor_list;
    
    if (key_dtor_list_1)
    {
        struct __mingwthr_key* key_dtor_list_2 = nullptr;
        
        while (true)
        {
            struct __mingwthr_key* next = key_dtor_list_1->next;
            
            if (key_dtor_list_1->key == key)
            {
                if (!key_dtor_list_2)
                    key_dtor_list = next;
                else
                    key_dtor_list_2->next = next;
                
                free(key_dtor_list_1);
                break;
            }
            
            key_dtor_list_2 = key_dtor_list_1;
            
            if (!next)
                break;
            
            key_dtor_list_1 = next;
        }
    }
    
    LeaveCriticalSection(&__mingwthr_cs);
    return 0;
}

int __mingw_TLScallback(void* hDllHandle, long unsigned int reason, void* reserved)
{
    if (reason == 2)
        return 1;
    
    if (reason > 2)
    {
        if (reason == 3 && __mingwthr_cs_init)
            __mingwthr_run_key_dtors();
    }
    else if (!reason)
    {
        if (__mingwthr_cs_init)
            __mingwthr_run_key_dtors();
        
        if (__mingwthr_cs_init == 1)
        {
            struct __mingwthr_key* i = key_dtor_list;
            
            while (i)
            {
                struct __mingwthr_key* i_1 = i;
                i = i->next;
                free(i_1);
            }
            
            key_dtor_list = nullptr;
            __mingwthr_cs_init = 0;
            DeleteCriticalSection(&__mingwthr_cs);
        }
    }
    else
    {
        if (!__mingwthr_cs_init)
            InitializeCriticalSection(&__mingwthr_cs);
        
        __mingwthr_cs_init = 1;
    }
    
    return 1;
}

int _ValidateImageBase(unsigned char* pImageBase)
{
    if (*pImageBase == 0x5a4d)
    {
        void* rcx = &pImageBase[*(pImageBase + 0x3c)];
        
        if (*rcx == 0x4550)
        {
            int32_t result;
            result = *(rcx + 0x18) == 0x20b;
            return result;
        }
    }
    
    return 0;
}

void* _FindPESection(unsigned char* pImageBase, long long unsigned int rva)
{
    void* rcx = &pImageBase[*(pImageBase + 0x3c)];
    uint32_t r8 = *(rcx + 6);
    void* result = rcx + *(rcx + 0x14) + 0x18;
    
    if (r8)
    {
        void* r9_1 = result + (r8 - 1) * 0x28 + 0x28;
        
        do
        {
            uint64_t r8_1 = *(result + 0xc);
            
            if (rva >= r8_1 && rva < r8_1 + *(result + 8))
                return result;
            
            result += 0x28;
        } while (result != r9_1);
    }
    
    return nullptr;
}

struct Section_Header* const _FindPESectionByName(char const* pName)
{
    if (strlen(pName) <= 8)
    {
        for (struct Section_Header* const _Str1 = &__section_headers; _Str1 != 0x24d2804a8; 
            _Str1 = &_Str1[1])
        {
            if (!strncmp(_Str1, pName, 8))
                return _Str1;
        }
    }
    
    return 0;
}

struct Section_Header* const __mingw_GetSectionForAddress(void* p)
{
    for (struct Section_Header* const i = &__section_headers; i != 0x24d2804a8; i = &i[1])
    {
        uint64_t virtualAddress = i->virtualAddress;
        
        if (p - &__dos_header >= virtualAddress
                && p - &__dos_header < virtualAddress + i->virtualSize)
            return i;
    }
    
    return 0;
}

int __mingw_GetSectionCount() __pure
{
    return 0x14;
}

struct Section_Header* const _FindPESectionExec(long long unsigned int eNo)
{
    struct Section_Header* const i = &__section_headers;
    
    do
    {
        if (*i->characteristics[3] & 0x20)
        {
            if (!eNo)
                return i;
            
            eNo -= 1;
        }
        
        i = &i[1];
    } while (0x24d2804a8 != i);
    
    return 0;
}

struct DOS_Header* const _GetPEImageBase() __pure
{
    return &__dos_header;
}

uint32_t _IsNonwritableInCurrentImage(unsigned char* pTarget)
{
    struct Section_Header* const i = &__section_headers;
    
    do
    {
        uint64_t virtualAddress = i->virtualAddress;
        
        if (pTarget - &__dos_header >= virtualAddress
                && pTarget - &__dos_header < virtualAddress + i->virtualSize)
            return ~i->characteristics >> 0x1f;
        
        i = &i[1];
    } while (0x24d2804a8 != i);
    
    return 0;
}

void* __mingw_enum_import_library_names(int i)
{
    struct Section_Header* const i_1 = &__section_headers;
    
    do
    {
        uint64_t virtualAddress = i_1->virtualAddress;
        
        if (0x9000 >= virtualAddress && 0x9000 < virtualAddress + i_1->virtualSize)
        {
            void* rax_3 = &_.idata$2;
            
            while (*(rax_3 + 4) || *(rax_3 + 0xc))
            {
                if (i <= 0)
                    return &__dos_header.e_magic[*(rax_3 + 0xc)];
                
                i -= 1;
                rax_3 += 0x14;
            }
            
            break;
        }
        
        i_1 = &i_1[1];
    } while (0x24d2804a8 != i_1);
    
    return 0;
}

void _fpreset() __pure
{
    return;
}

int64_t _.text(int64_t arg1 @ rax)
{
    int64_t result = arg1;
    void arg_8;
    void* rcx = &arg_8;
    
    if (arg1 >= 0x1000)
    {
        do
        {
            rcx -= 0x1000;
            *rcx = *rcx;
            arg1 -= 0x1000;
        } while (arg1 > 0x1000);
    }
    
    void* rcx_1 = rcx - arg1;
    *rcx_1 = *rcx_1;
    return result;
}

int DllEntryPoint(void* hDllHandle, long unsigned int dwReason, void* lpreserved) __pure
{
    return 1;
}

int DllMain(void* hDllHandle, long unsigned int dwReason, void* lpreserved) __pure
{
    return 1;
}

void* __acrt_iob_func(unsigned int index)
{
    return &__iob_func()[index * 6];
}

int _initialize_onexit_table(struct _onexit_table_t* table)
{
    if (!table)
        return 0xffffffff;
    
    __builtin_memset(table, 0, 0x18);
    return 0;
}

int _register_onexit_function(struct _onexit_table_t* table, int (* func)())
{
    if (table)
    {
        _lock(8);
        void (** _end)();
        int (** _last)();
        
        if (!table->_first)
        {
            void (** _last_1)() = calloc(0x20, 8);
            table->_first = _last_1;
            _last = _last_1;
            
            if (_last_1)
            {
                table->_last = _last_1;
                _end = &_last_1[0x20];
                table->_end = _end;
                goto label_24d28229f;
            }
            
            _unlock(8);
        }
        else
        {
            _last = table->_last;
            _end = table->_end;
            label_24d28229f:
            
            if (_last != _end)
                goto label_24d2822ad;
            
            void (** _first)() = table->_first;
            void* rsi_2 = _last - _first;
            uint64_t _Size = rsi_2 >> 3 << 4;
            void* rax_3 = realloc(_first, _Size);
            
            if (rax_3)
            {
                table->_first = rax_3;
                _last = rax_3 + rsi_2;
                table->_end = rax_3 + _Size;
                label_24d2822ad:
                table->_last = &_last[1];
                *_last = func;
                _unlock(8);
                return 0;
            }
            
            _unlock(8);
        }
    }
    
    return -1;
}

int _execute_onexit_table(struct _onexit_table_t* table)
{
    _lock(8);
    void (** _first)() = table->_first;
    void (** _last)() = table->_last;
    __builtin_memset(table, 0, 0x18);
    _unlock(8);
    
    if (_first)
    {
        label_24d282389:
        
        for (_last -= 8; _last >= _first; _last -= 8)
        {
            void (* rax_1)() = *_last;
            
            if (!rax_1)
                goto label_24d282389;
            
            rax_1();
        }
        
        free(_first);
    }
    
    return 0;
}

FILE* __iob_func()
{
    /* tailcall */
    return __iob_func();
}

void _amsg_exit(int32_t rterrnum)
{
    /* tailcall */
    return _amsg_exit(rterrnum);
}

void _initterm(_PVFV* _First, _PVFV* _Last)
{
    /* tailcall */
    return _initterm(_First, _Last);
}

void _lock(int32_t locknum)
{
    /* tailcall */
    return _lock(locknum);
}

void _unlock(int32_t locknum)
{
    /* tailcall */
    return _unlock(locknum);
}

void abort() __noreturn
{
    /* tailcall */
    return abort();
}

int64_t calloc(uint64_t _Count, uint64_t _Size)
{
    /* tailcall */
    return calloc(_Count, _Size);
}

void free(void* _Block)
{
    /* tailcall */
    return free(_Block);
}

uint64_t fwrite(void const* _Buffer, uint64_t _ElementSize, uint64_t _ElementCount, FILE* _Stream)
{
    /* tailcall */
    return fwrite(_Buffer, _ElementSize, _ElementCount, _Stream);
}

int64_t memset(void* _Dst, int32_t _Val, uint64_t _Size)
{
    /* tailcall */
    return memset(_Dst, _Val, _Size);
}

int64_t realloc(void* _Block, uint64_t _Size)
{
    /* tailcall */
    return realloc(_Block, _Size);
}

uint64_t strlen(char const* _Str)
{
    /* tailcall */
    return strlen(_Str);
}

int32_t strncmp(char const* _Str1, char const* _Str2, uint64_t _MaxCount)
{
    /* tailcall */
    return strncmp(_Str1, _Str2, _MaxCount);
}

int32_t vfprintf(FILE* const _Stream, char const* const _Format, va_list _ArgList)
{
    /* tailcall */
    return vfprintf(_Stream, _Format, _ArgList);
}

uint64_t VirtualQuery(void* lpAddress, MEMORY_BASIC_INFORMATION* lpBuffer, uint64_t dwLength)
{
    /* tailcall */
    return VirtualQuery(lpAddress, lpBuffer, dwLength);
}

BOOL VirtualProtect(void* lpAddress, uint64_t dwSize, enum PAGE_PROTECTION_FLAGS flNewProtect, enum PAGE_PROTECTION_FLAGS* lpflOldProtect)
{
    /* tailcall */
    return VirtualProtect(lpAddress, dwSize, flNewProtect, lpflOldProtect);
}

int64_t TlsGetValue(uint32_t dwTlsIndex)
{
    /* tailcall */
    return TlsGetValue(dwTlsIndex);
}

void Sleep(uint32_t dwMilliseconds)
{
    /* tailcall */
    return Sleep(dwMilliseconds);
}

void LeaveCriticalSection(CRITICAL_SECTION* lpCriticalSection)
{
    /* tailcall */
    return LeaveCriticalSection(lpCriticalSection);
}

void InitializeCriticalSection(CRITICAL_SECTION* lpCriticalSection)
{
    /* tailcall */
    return InitializeCriticalSection(lpCriticalSection);
}

enum WIN32_ERROR GetLastError()
{
    /* tailcall */
    return GetLastError();
}

void EnterCriticalSection(CRITICAL_SECTION* lpCriticalSection)
{
    /* tailcall */
    return EnterCriticalSection(lpCriticalSection);
}

void DeleteCriticalSection(CRITICAL_SECTION* lpCriticalSection)
{
    /* tailcall */
    return DeleteCriticalSection(lpCriticalSection);
}

int64_t register_frame_ctor()
{
    /* tailcall */
    return __gcc_register_frame();
}


