import struct

z_values = [
    -521657136, -131751443, -1931229822, -845967842,
    1029892313, 752912543, 911362600, 1637819592,
    146520094, 168057148, 1659191502, -1400571826,
    28757204, -2064308732
]

# Convert to little-endian bytes
key_bytes = b''.join(struct.pack('<i', val) for val in z_values)

print(f"Key buffer: {key_bytes.hex()}")

cipher_hex = "f50002291b1daf43e44169606a6f377e95a4f8d46d9a1486a20285a467545bfe862700"
cipher = bytes.fromhex(cipher_hex)

# Key offset is +0xa7d3 â€” probably means just starting later in a bigger buffer
# But we only have 56 known bytes; try XORing first 35 bytes directly
decrypted = bytes([a ^ b for a, b in zip(cipher, key_bytes)])

print("Decrypted (raw):", decrypted)
print("Decrypted (ascii):", decrypted.decode(errors='replace'))

